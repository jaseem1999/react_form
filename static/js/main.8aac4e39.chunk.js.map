{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","email","massage","number","data","setData","handleChange","e","target","value","handleSubmit","a","preventDefault","fetch","method","headers","body","JSON","stringify","Date","toLocaleString","response","json","console","log","className","onSubmit","type","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAiEeA,MA7Df,WACE,MAAwBC,mBAAS,CAC/BC,KAAO,GACPC,MAAQ,GACRC,QAAU,GACVC,OAAS,KAJX,mBAAOC,EAAP,KAAaC,EAAb,KAMOL,EAAgCI,EAAhCJ,KAAMC,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,QAASC,EAAUC,EAAVD,OACvBG,EAAe,SAACC,GACpBF,EAAQ,2BAAID,GAAL,kBAAYG,EAAEC,OAAOR,KAAOO,EAAEC,OAAOC,UAExCC,EAAY,uCAAG,WAAOH,GAAP,eAAAI,EAAA,6DACnBJ,EAAEK,iBADiB,kBAKEC,MAAM,kFACzB,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnB,CAAClB,EAAKC,EAAMC,EAAQC,GAAQ,IAAIgB,MAAOC,sBAZ1B,cAKXhB,EALW,gBAiBXiB,SAASC,OAjBE,OAkBjBjB,EAAQ,2BAAID,GAAL,IAAWJ,KAAK,GAAIC,MAAO,GAAIC,QAAS,GAAIC,OAAQ,MAlB1C,kDAqBjBoB,QAAQC,IAAR,MArBiB,0DAAH,sDAwBlB,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,WAAf,UACA,0CACA,qBAAKA,UAAU,cAAf,SACA,sBAAMA,UAAU,GAAGC,SAAUhB,EAA7B,SACE,sBAAKe,UAAU,aAAf,UACA,wCADA,IACkB,uBAClB,uBAAOE,KAAK,OAAOF,UAAU,WAAYzB,KAAK,OAAOS,MAAOT,EAAM4B,SAAUtB,IAAe,uBAC3F,yCAAkB,uBAClB,uBAAOqB,KAAK,OAAOF,UAAU,WAAYzB,KAAK,QAAQS,MAAOR,EAAO2B,SAAUtB,IAAe,uBAC9F,2CAAoB,uBACnB,uBAAOqB,KAAK,OAAOF,UAAU,WAAWzB,KAAK,UAAUS,MAAOP,EAAS0B,SAAUtB,IAAe,uBAC/F,6CAAsB,uBACvB,uBAAOqB,KAAK,OAAOF,UAAU,WAAWzB,KAAK,SAASS,MAAON,EAAQyB,SAAUtB,IAAe,uBAC9F,uBAAOqB,KAAK,SAASF,UAAU,iBAAkBhB,MAAM,wBC1ChDoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8aac4e39.chunk.js","sourcesContent":["\nimport './App.css';\nimport React, {useState} from 'react' \n\nfunction App() {\n  const [data, setData] = useState({\n    name : \"\",\n    email : \"\",\n    massage : \"\",\n    number : \"\",\n  });\n  const {name, email, massage, number} = data;\n  const handleChange = (e) => {\n    setData({...data, [e.target.name]: e.target.value})\n  }\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n\n    try {\n      const data = await fetch(\"https://v1.nocodeapi.com/jaseem1999/google_sheets/UcsNdvrrSWAPkQQH?tabId=Sheet1\",\n      {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify([\n          [name,email,massage,number, new Date().toLocaleString()],\n        ]),\n      }\n      );\n      // eslint-disable-next-line no-undef\n      await response.json()\n      setData({...data, name:\"\", email: \"\", massage: \"\", number: \"\",});\n      \n    } catch (err) {\n      console.log(err);\n    }\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"continer\">\n      <h1>FeedBack</h1>\n      <div className=\"form-layout\">\n      <form className=\"\" onSubmit={handleSubmit}>\n        <div className=\"form-input\">\n        <span>Name</span> <br/>\n        <input type=\"text\" className=\"nameText\"  name=\"name\" value={name} onChange={handleChange}/><br/>\n        <span>Email</span><br/>\n        <input type=\"text\" className=\"nameText\"  name=\"email\" value={email} onChange={handleChange}/><br/>\n       <span>Massage</span><br/>\n        <input type=\"text\" className=\"nameText\" name=\"massage\" value={massage} onChange={handleChange}/><br/>\n         <span>Mobile No</span><br/>\n        <input type=\"text\" className=\"nameText\" name=\"number\" value={number} onChange={handleChange}/><br/>\n        <input type=\"submit\" className=\"nameTextSubmit\"  value=\"submit\" />\n\n        </div>\n        \n      </form>\n      </div>\n      </div>\n     </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}